// TODO: ðŸ‘» Me Sass Color

$colors: (
	primary-color: #1088ff,
	secondary-color: #00ddff,
	danger-color: #c21533,
	success-color: #00b66a,
	warning-color: #f79600,
	black-color: #000000,
	white-color: #ffffff
);

$themes: (
	light: (
		theme-color: #dfe3e6,
		theme-opposite-color: #22272e,
		font-color: #3c3e42
	),
	dark: (
		theme-color: #22272e,
		theme-opposite-color: #dfe3e6,
		font-color: #dddee0
	)
);

// TODO: äº®ä¸»é¢˜æ··è‰²
html:not(html[data-theme='dark']),
html[data-theme='light'] {
	@each $key, $val in map-get($themes, light) {
		--#{$namespace}-#{$key}: #{$val};
	}
	@each $key, $val in $colors {
		@for $i from 1 to 10 {
			--#{$namespace}-#{$key}-#{$i * 10}: #{mix($val, map-get(map-get($themes, light), theme-color), 10% * $i)};
		}
		--#{$namespace}-#{$key}: #{$val};
	}
}

// TODO: æš—ä¸»é¢˜æ··è‰²
html[data-theme='dark'] {
	@each $key, $val in map-get($themes, dark) {
		--#{$namespace}-#{$key}: #{$val};
	}
	@each $key, $val in $colors {
		@for $i from 1 to 10 {
			--#{$namespace}-#{$key}-#{$i * 10}: #{mix($val, map-get(map-get($themes, dark), theme-color), 10% * $i)};
		}
		--#{$namespace}-#{$key}: #{$val};
	}
}

html {
	// TODO: ä¸»è‰²è°ƒ+å‰¯è‰²è°ƒæ··è‰²
	@for $i from 1 to 10 {
		--#{$namespace}-primary-secondary-color-#{$i * 10}: #{mix(map-get($colors, primary-color), map-get($colors, secondary-color), 10% * $i)};
	}
}
